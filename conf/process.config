import java.nio.file.Paths

process {

	beforeScript = "module purge"
	executor = "slurm"
	//executor = "local"
	cpus = 1
	memory = "7000"

	publish_mode = "symlink"
	publish_overwrite = true

	module = "Anaconda2/5.1.0"
	conda = "/camp/stp/babs/working/software/anaconda/envs/qcpipeline"

	withName: "fastqc" {

		publishDir = [
			path: { Paths.get( project_outdir , "fastqc" , "raw" ) },
			mode: publish_mode,
			overwrite: publish_overwrite,
			saveAs: { "$flowcell/$it" }
		]
	}

	withName: "cutadapt" {

		publishDir = [
			path: { Paths.get( project_outdir, "cutadapt" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: "fastqc_cutadapt" {

		publishDir = [
			path: { Paths.get( project_outdir, "fastqc", "cutadapt" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: "sampling" {

		publishDir = [
			path: { Paths.get( project_outdir, "sampling", "fastq" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: "sampled_star" {

		cpus = 32

		publishDir = [
			path: { Paths.get( project_outdir, "sampling", "bam" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: "sampled_sort" {

		cpus = 32

		publishDir = [
			path: { Paths.get( project_outdir, "sampling", "bam" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	//withName: "sampled_picard_group" {

	//	cpus = 32

	//	publishDir = [
	//		path: { Paths.get( project_outdir, "sampling", "picard" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	withName: "sampled_picard_duplicate" {

		cpus = 32

		publishDir = [
			path: { Paths.get( project_outdir, "sampling", "picard" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: "sampled_picard_index" {

		publishDir = [
			path: { Paths.get( project_outdir, "sampling", "picard" ) },
			mode: publish_mode,
			overwrite: publish_overwrite,
			saveAs: {
				// !! this output triggers a WARNING because we try to publish the
				// bam file a second time (the first time was with process
				// "sampled_picard_duplicate"
				it.indexOf(".bai") != -1 ? "$it" : null
			}
		]
	}

	withName: "sampled_infer_experiment" {

		publishDir = [
			path: { Paths.get( project_outdir, "sampling", "infer_experiment" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: "sampled_rnaseqc" {

		publishDir = [
			path: { Paths.get( project_outdir, "sampling", "rnaseqc" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	//withName: "sampled_multiqc" {

	//	publishDir = [
	//		path: { Paths.get( project_outdir, "sampling", "multiqc" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	withName: "strandedness" {

		publishDir = [
			path: { Paths.get( project_outdir, "sampling", "strandedness" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: "fastq_screen" {

		cpus = 32

		publishDir = [
			path: { Paths.get( project_outdir, "fastq_screen" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: rsem_star {

		cpus = 32

		publishDir = [
			path: { Paths.get( project_outdir, "rsem" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: star {

		cpus = 32

		publishDir = [
			path: { Paths.get( project_outdir, "star" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: samtools_sort_index {

		cpus = 32

		publishDir = [
			path: { Paths.get( project_outdir, "samtools" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: picard_group {

		publishDir = [
			path: { Paths.get( project_outdir, "picard", "group" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}
	
	//withName: index {

	//	module = [ { check_modules( default_modules["samtools"] ) } ]

	//	publishDir = [
	//		path: { Paths.get( project_outdir, "picard", "group" ) },
	//		mode: publish_mode,
	//		overwrite: publish_overwrite
	//	]
	//}

	withName: picard_rnaseqmetrics {

		publishDir = [
			path: { Paths.get( project_outdir, "picard", "rnaseqmetrics" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: picard_multimetrics {

		publishDir = [
			path: { Paths.get( project_outdir, "picard", "multimetrics" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: picard_complexity {

		publishDir = [
			path: { Paths.get( project_outdir, "picard", "complexity" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: picard_duplicates {

		publishDir = [
			path: { Paths.get( project_outdir, "picard", "duplicates" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: samtools_stats {

		publishDir = [
			path: { Paths.get( project_outdir, "samtools" , "stats") },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: samtools_idxstats {

		publishDir = [
			path: { Paths.get( project_outdir, "samtools" , "idxstats") },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: chromosome {

		publishDir = [
			path: { Paths.get( project_outdir, "chromosome") },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: infer_experiment {

		publishDir = [
			path: { Paths.get( project_outdir, "rseqc", "infer_experiment" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: junction_annotation {

		publishDir = [
			path: { Paths.get( project_outdir, "rseqc", "junction_annotation" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: junction_saturation {

		publishDir = [
			path: { Paths.get( project_outdir, "rseqc", "junction_saturation" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: mismatch_profile {

		publishDir = [
			path: { Paths.get( project_outdir, "rseqc", "mismatch_profile" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: read_distribution {

		publishDir = [
			path: { Paths.get( project_outdir, "rseqc", "read_distribution" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: transcript_integrity_number {

		publishDir = [
			path: {
				Paths.get(
					project_outdir,
					"rseqc",
					"transcript_integrity_number"
					)
			},
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: rnaseqc {

		publishDir = [
			path: { Paths.get( project_outdir, "rnaseqc" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: tss {

		publishDir = [
			path: { Paths.get( project_outdir, "tss" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: qc_genes {

		publishDir = [
			path: { Paths.get( project_outdir, "qc_genes" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: transcripts {

		publishDir = [
			path: { Paths.get( project_outdir, "transcripts" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: multiqc_conf {

		publishDir = [
			path: { Paths.get( project_outdir, "multiqc" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	withName: multiqc {

		publishDir = [
			path: { Paths.get( project_outdir, "multiqc" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}
}

