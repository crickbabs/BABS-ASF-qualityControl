import java.nio.file.Paths
import org.yaml.snakeyaml.Yaml

/// BEGIN NOTE 
// we wanted to have the data structure genomes.GRCh38.86.star and
// genomes.GRCh38.rsem.star, but nextflow is confusing to two star locations...
/// END NOTE

params {

	genomes {

		base_dir = "/camp/svc/reference/Genomics/babs"

		"GRCh38" {

			version_name = "GRCh38"
			binomial = ["homo", "sapiens"]

			species_dirname = binomial.join("_")
			species_filename = binomial.join("_").capitalize()

			base_name = species_filename + "." + version_name

			version_dir = Paths.get(
								base_dir,
								species_dirname,
								"ensembl",
								version_name).toString()

			"86" {

				release = "86"

				// directories
				release_dirname = "release-" + release
				release_dir = Paths.get(version_dir, release_dirname).toString()
				seq_dir = Paths.get(release_dir, "genome").toString()
				annot_dir = Paths.get(release_dir, "gtf").toString()

				// the genome sequence fasta file
				fasta_name = base_name + ".dna_sm.primary_assembly.fa"
				fasta = Paths.get(seq_dir, fasta_name).toString()

				///////////////////////////////////////////////////////////////////
				// annotations

				gtf_name = base_name + "." + release + ".gtf"
				gtf = Paths.get(annot_dir, gtf_name).toString()

				bed_name = base_name + "." + release + ".bed"
				bed = Paths.get(annot_dir, bed_name).toString()

				refflat_name = base_name + "." + release + ".refflat"
				refflat = Paths.get(annot_dir, refflat_name).toString()

				rrna_list_name = base_name + "." + release + ".rRNA.list"
				rrna_list = Paths.get(annot_dir, rrna_list_name).toString()

				rrna_interval_list_name =
					base_name + "." + release + ".rRNA.interval_list"
				rrna_interval_list =
					Paths.get(annot_dir, rrna_interval_list_name).toString()

				// special RNASeQC annotation
				rnaseqc_gtf_name = base_name + "." + release + ".rnaseqc.gtf"
				rnaseqc_gtf = Paths.get(annot_dir, rnaseqc_gtf_name).toString()

				///////////////////////////////////////////////////////////////////
				// indexes
				
				indices_dir = Paths.get(release_dir, "genome_idx").toString()

				// star //
				star {

					index_dir = Paths.get(indices_dir, "star").toString()

					"100bp" { index = Paths.get(index_dir, "100bp").toString() }
					"75bp" { index = Paths.get(index_dir, "75bp").toString() }
					"50bp" { index = Paths.get(index_dir, "50bp").toString() }
				}

				// rsem quantifier //
				rsem {

					quantif_dir = Paths.get(indices_dir, "rsem").toString()

					rsem_star {

						aligner_dir = Paths.get(quantif_dir, "star").toString()

						"100bp" {
							index_dir = Paths.get(aligner_dir, "100bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"75bp" {
							index_dir = Paths.get(aligner_dir, "75bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"50bp" {
							index_dir = Paths.get(aligner_dir, "50bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}
					}
				}
			} // end of 86

			"89" {

				release = "89"

				// directories
				release_dirname = "release-" + release
				release_dir = Paths.get(version_dir, release_dirname).toString()
				seq_dir = Paths.get(release_dir, "genome").toString()
				annot_dir = Paths.get(release_dir, "gtf").toString()

				// the genome sequence fasta file
				fasta_name = base_name + ".dna_sm.primary_assembly.fa"
				fasta = Paths.get(seq_dir, fasta_name).toString()

				///////////////////////////////////////////////////////////////////
				// annotations

				gtf_name = base_name + "." + release + ".gtf"
				gtf = Paths.get(annot_dir, gtf_name).toString()

				bed_name = base_name + "." + release + ".bed"
				bed = Paths.get(annot_dir, bed_name).toString()

				refflat_name = base_name + "." + release + ".refflat"
				refflat = Paths.get(annot_dir, refflat_name).toString()

				rrna_list_name = base_name + "." + release + ".rRNA.list"
				rrna_list = Paths.get(annot_dir, rrna_list_name).toString()

				rrna_interval_list_name =
					base_name + "." + release + ".rRNA.interval_list"
				rrna_interval_list =
					Paths.get(annot_dir, rrna_interval_list_name).toString()

				// special RNASeQC annotation
				rnaseqc_gtf_name = base_name + "." + release + ".rnaseqc.gtf"
				rnaseqc_gtf = Paths.get(annot_dir, rnaseqc_gtf_name).toString()

				///////////////////////////////////////////////////////////////////
				// indexes
				
				indices_dir = Paths.get(release_dir, "genome_idx").toString()

				// star //
				star {

					index_dir = Paths.get(indices_dir, "star").toString()

					"100bp" { index = Paths.get(index_dir, "100bp").toString() }
					"75bp" { index = Paths.get(index_dir, "75bp").toString() }
					"50bp" { index = Paths.get(index_dir, "50bp").toString() }
				}

				// rsem quantifier //
				rsem {

					quantif_dir = Paths.get(indices_dir, "rsem").toString()

					rsem_star {

						aligner_dir = Paths.get(quantif_dir, "star").toString()

						"100bp" {
							index_dir = Paths.get(aligner_dir, "100bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"75bp" {
							index_dir = Paths.get(aligner_dir, "75bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"50bp" {
							index_dir = Paths.get(aligner_dir, "50bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}
					}
				}
			} // end of 89

		} // end of GRCh38

		"GRCm38" {

			version_name = "GRCm38"
			binomial = ["mus", "musculus"]

			species_dirname = binomial.join("_")
			species_filename = binomial.join("_").capitalize()

			base_name = species_filename + "." + version_name

			version_dir = Paths.get(
								base_dir,
								species_dirname,
								"ensembl",
								version_name).toString()

			"86" {

				release = "86"

				// directories
				release_dirname = "release-" + release
				release_dir = Paths.get(version_dir, release_dirname).toString()
				seq_dir = Paths.get(release_dir, "genome").toString()
				annot_dir = Paths.get(release_dir, "gtf").toString()

				// the genome sequence fasta file
				fasta_name = base_name + ".dna_sm.primary_assembly.fa"
				fasta = Paths.get(seq_dir, fasta_name).toString()

				///////////////////////////////////////////////////////////////////
				// annotations

				gtf_name = base_name + "." + release + ".gtf"
				gtf = Paths.get(annot_dir, gtf_name).toString()

				bed_name = base_name + "." + release + ".bed"
				bed = Paths.get(annot_dir, bed_name).toString()

				refflat_name = base_name + "." + release + ".refflat"
				refflat = Paths.get(annot_dir, refflat_name).toString()

				rrna_list_name = base_name + "." + release + ".rRNA.list"
				rrna_list = Paths.get(annot_dir, rrna_list_name).toString()

				rrna_interval_list_name =
					base_name + "." + release + ".rRNA.interval_list"
				rrna_interval_list =
					Paths.get(annot_dir, rrna_interval_list_name).toString()

				// special RNASeQC annotation
				rnaseqc_gtf_name = base_name + "." + release + ".rnaseqc.gtf"
				rnaseqc_gtf = Paths.get(annot_dir, rnaseqc_gtf_name).toString()

				///////////////////////////////////////////////////////////////////
				// indexes
				
				indices_dir = Paths.get(release_dir, "genome_idx").toString()

				// star //
				star {

					index_dir = Paths.get(indices_dir, "star").toString()

					"150bp" { index = Paths.get(index_dir, "150bp").toString() }
					"100bp" { index = Paths.get(index_dir, "100bp").toString() }
					"75bp" { index = Paths.get(index_dir, "75bp").toString() }
					"50bp" { index = Paths.get(index_dir, "50bp").toString() }
				}

				// rsem quantifier //
				rsem {

					quantif_dir = Paths.get(indices_dir, "rsem").toString()

					rsem_star {

						aligner_dir = Paths.get(quantif_dir, "star").toString()

						"100bp" {
							index_dir = Paths.get(aligner_dir, "100bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"75bp" {
							index_dir = Paths.get(aligner_dir, "75bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"50bp" {
							index_dir = Paths.get(aligner_dir, "50bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}
					}
				}
			} // end of 86

			"89" {

				release = "89"

				// directories
				release_dirname = "release-" + release
				release_dir = Paths.get(version_dir, release_dirname).toString()
				seq_dir = Paths.get(release_dir, "genome").toString()
				annot_dir = Paths.get(release_dir, "gtf").toString()

				// the genome sequence fasta file
				fasta_name = base_name + ".dna_sm.primary_assembly.fa"
				fasta = Paths.get(seq_dir, fasta_name).toString()

				///////////////////////////////////////////////////////////////////
				// annotations

				gtf_name = base_name + "." + release + ".gtf"
				gtf = Paths.get(annot_dir, gtf_name).toString()

				bed_name = base_name + "." + release + ".bed"
				bed = Paths.get(annot_dir, bed_name).toString()

				refflat_name = base_name + "." + release + ".refflat"
				refflat = Paths.get(annot_dir, refflat_name).toString()

				rrna_list_name = base_name + "." + release + ".rRNA.list"
				rrna_list = Paths.get(annot_dir, rrna_list_name).toString()

				rrna_interval_list_name =
					base_name + "." + release + ".rRNA.interval_list"
				rrna_interval_list =
					Paths.get(annot_dir, rrna_interval_list_name).toString()

				// special RNASeQC annotation
				rnaseqc_gtf_name = base_name + "." + release + ".rnaseqc.gtf"
				rnaseqc_gtf = Paths.get(annot_dir, rnaseqc_gtf_name).toString()

				///////////////////////////////////////////////////////////////////
				// indexes
				
				indices_dir = Paths.get(release_dir, "genome_idx").toString()

				// star //
				star {

					index_dir = Paths.get(indices_dir, "star").toString()

					"150bp" { index = Paths.get(index_dir, "150bp").toString() }
					"100bp" { index = Paths.get(index_dir, "100bp").toString() }
					"75bp" { index = Paths.get(index_dir, "75bp").toString() }
					"50bp" { index = Paths.get(index_dir, "50bp").toString() }
				}

				// rsem quantifier //
				rsem {

					quantif_dir = Paths.get(indices_dir, "rsem").toString()

					rsem_star {

						aligner_dir = Paths.get(quantif_dir, "star").toString()

						"100bp" {
							index_dir = Paths.get(aligner_dir, "100bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"75bp" {
							index_dir = Paths.get(aligner_dir, "75bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"50bp" {
							index_dir = Paths.get(aligner_dir, "50bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}
					}
				}
			} // end of 89

		} // end of GRCm38

		"BDGP6" {

			version_name = "BDGP6"
			binomial = ["drosophila", "melanogaster"]

			species_dirname = binomial.join("_")
			species_filename = binomial.join("_").capitalize()

			base_name = species_filename + "." + version_name

			version_dir = Paths.get(
								base_dir,
								species_dirname,
								"ensembl",
								version_name).toString()

			"86" {

				release = "86"

				// directories
				release_dirname = "release-" + release
				release_dir = Paths.get(version_dir, release_dirname).toString()
				seq_dir = Paths.get(release_dir, "genome").toString()
				annot_dir = Paths.get(release_dir, "gtf").toString()

				// the genome sequence fasta file
				fasta_name = base_name + ".dna_sm.toplevel.fa"
				fasta = Paths.get(seq_dir, fasta_name).toString()

				///////////////////////////////////////////////////////////////////
				// annotations

				gtf_name = base_name + "." + release + ".gtf"
				gtf = Paths.get(annot_dir, gtf_name).toString()

				bed_name = base_name + "." + release + ".bed"
				bed = Paths.get(annot_dir, bed_name).toString()

				refflat_name = base_name + "." + release + ".refflat"
				refflat = Paths.get(annot_dir, refflat_name).toString()

				rrna_list_name = base_name + "." + release + ".rRNA.list"
				rrna_list = Paths.get(annot_dir, rrna_list_name).toString()

				rrna_interval_list_name =
					base_name + "." + release + ".rRNA.interval_list"
				rrna_interval_list =
					Paths.get(annot_dir, rrna_interval_list_name).toString()

				// special RNASeQC annotation
				rnaseqc_gtf_name = base_name + "." + release + ".rnaseqc.gtf"
				rnaseqc_gtf = Paths.get(annot_dir, rnaseqc_gtf_name).toString()

				///////////////////////////////////////////////////////////////////
				// indexes
				
				indices_dir = Paths.get(release_dir, "genome_idx").toString()

				// star //
				star {

					index_dir = Paths.get(indices_dir, "star").toString()

					"100bp" { index = Paths.get(index_dir, "100bp").toString() }
					"75bp" { index = Paths.get(index_dir, "75bp").toString() }
					"50bp" { index = Paths.get(index_dir, "50bp").toString() }
				}

				// rsem quantifier //
				rsem {

					quantif_dir = Paths.get(indices_dir, "rsem").toString()

					rsem_star {

						aligner_dir = Paths.get(quantif_dir, "star").toString()

						"100bp" {
							index_dir = Paths.get(aligner_dir, "100bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"75bp" {
							index_dir = Paths.get(aligner_dir, "75bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"50bp" {
							index_dir = Paths.get(aligner_dir, "50bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}
					}
				}
			} // end of 86

		} // end of BDGP6

		"Gallus_gallus-5.0" {

			version_name = "Gallus_gallus-5.0"
			binomial = ["gallus", "gallus"]

			species_dirname = binomial.join("_")
			species_filename = binomial.join("_").capitalize()

			base_name = species_filename + "." + version_name

			version_dir = Paths.get(
								base_dir,
								species_dirname,
								"ensembl",
								version_name).toString()

			"89" {

				release = "89"

				// directories
				release_dirname = "release-" + release
				release_dir = Paths.get(version_dir, release_dirname).toString()
				seq_dir = Paths.get(release_dir, "genome").toString()
				annot_dir = Paths.get(release_dir, "gtf").toString()

				// the genome sequence fasta file
				fasta_name = base_name + ".dna_sm.toplevel.fa"
				fasta = Paths.get(seq_dir, fasta_name).toString()

				///////////////////////////////////////////////////////////////////
				// annotations

				gtf_name = base_name + "." + release + ".gtf"
				gtf = Paths.get(annot_dir, gtf_name).toString()

				bed_name = base_name + "." + release + ".bed"
				bed = Paths.get(annot_dir, bed_name).toString()

				refflat_name = base_name + "." + release + ".refflat"
				refflat = Paths.get(annot_dir, refflat_name).toString()

				rrna_list_name = base_name + "." + release + ".rRNA.list"
				rrna_list = Paths.get(annot_dir, rrna_list_name).toString()

				rrna_interval_list_name =
					base_name + "." + release + ".rRNA.interval_list"
				rrna_interval_list =
					Paths.get(annot_dir, rrna_interval_list_name).toString()

				// special RNASeQC annotation
				rnaseqc_gtf_name = base_name + "." + release + ".rnaseqc.gtf"
				rnaseqc_gtf = Paths.get(annot_dir, rnaseqc_gtf_name).toString()

				///////////////////////////////////////////////////////////////////

				rsem {

					quantif_dir = Paths.get(release_dir,
													"genome_idx",
													"rsem"
													).toString()

					star {

						aligner_dir = Paths.get(quantif_dir, "star").toString()

						"100bp" {
							index_dir = Paths.get(aligner_dir, "100bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"75bp" {
							index_dir = Paths.get(aligner_dir, "75bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"50bp" {
							index_dir = Paths.get(aligner_dir, "50bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}
					}
				}
			} // end of 89

		} // end of Gallus_gallus-5.0

		"EPr1" {

			version_name = "EPr1"
			binomial = ["plasmodium", "falciparum"]

			species_dirname = binomial.join("_")
			species_filename = binomial.join("_").capitalize()

			base_name = species_filename + "." + version_name

			version_dir = Paths.get(
								base_dir,
								species_dirname,
								"ensembl.protists",
								version_name).toString()

			"42" {

				release = "42"

				// directories
				release_dirname = "release-" + release
				release_dir = Paths.get(version_dir, release_dirname).toString()
				seq_dir = Paths.get(release_dir, "genome").toString()
				annot_dir = Paths.get(release_dir, "gtf").toString()

				// the genome sequence fasta file
				fasta_name = base_name + ".dna_sm.toplevel.fa"
				fasta = Paths.get(seq_dir, fasta_name).toString()

				///////////////////////////////////////////////////////////////////
				// annotations

				gtf_name = base_name + "." + release + ".gtf"
				gtf = Paths.get(annot_dir, gtf_name).toString()

				bed_name = base_name + "." + release + ".bed"
				bed = Paths.get(annot_dir, bed_name).toString()

				refflat_name = base_name + "." + release + ".refflat"
				refflat = Paths.get(annot_dir, refflat_name).toString()

				rrna_list_name = base_name + "." + release + ".rRNA.list"
				rrna_list = Paths.get(annot_dir, rrna_list_name).toString()

				rrna_interval_list_name =
					base_name + "." + release + ".rRNA.interval_list"
				rrna_interval_list =
					Paths.get(annot_dir, rrna_interval_list_name).toString()

				// special RNASeQC annotation
				rnaseqc_gtf_name = base_name + "." + release + ".rnaseqc.gtf"
				rnaseqc_gtf = Paths.get(annot_dir, rnaseqc_gtf_name).toString()

				///////////////////////////////////////////////////////////////////

				rsem {

					quantif_dir = Paths.get(release_dir,
													"genome_idx",
													"rsem"
													).toString()

					star {

						aligner_dir = Paths.get(quantif_dir, "star").toString()

						"100bp" {
							index_dir = Paths.get(aligner_dir, "100bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"75bp" {
							index_dir = Paths.get(aligner_dir, "75bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"50bp" {
							index_dir = Paths.get(aligner_dir, "50bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}
					}
				}
			} // end of 42

		} // end of EPr1

		"PBANKA01" {

			version_name = "PBANKA01"
			binomial = ["plasmodium", "berghei"]

			species_dirname = binomial.join("_")
			species_filename = binomial.join("_").capitalize()

			base_name = species_filename + "." + version_name

			version_dir = Paths.get(
								base_dir,
								species_dirname,
								"ensembl.protists",
								version_name).toString()

			"43" {

				release = "43"

				// directories
				release_dirname = "release-" + release
				release_dir = Paths.get(version_dir, release_dirname).toString()
				seq_dir = Paths.get(release_dir, "genome").toString()
				annot_dir = Paths.get(release_dir, "gtf").toString()

				// the genome sequence fasta file
				fasta_name = base_name + ".dna_sm.toplevel.fa"
				fasta = Paths.get(seq_dir, fasta_name).toString()

				///////////////////////////////////////////////////////////////////
				// annotations

				gtf_name = base_name + "." + release + ".gtf"
				gtf = Paths.get(annot_dir, gtf_name).toString()

				bed_name = base_name + "." + release + ".bed"
				bed = Paths.get(annot_dir, bed_name).toString()

				refflat_name = base_name + "." + release + ".refflat"
				refflat = Paths.get(annot_dir, refflat_name).toString()

				rrna_list_name = base_name + "." + release + ".rRNA.list"
				rrna_list = Paths.get(annot_dir, rrna_list_name).toString()

				rrna_interval_list_name =
					base_name + "." + release + ".rRNA.interval_list"
				rrna_interval_list =
					Paths.get(annot_dir, rrna_interval_list_name).toString()

				// special RNASeQC annotation
				rnaseqc_gtf_name = base_name + "." + release + ".rnaseqc.gtf"
				rnaseqc_gtf = Paths.get(annot_dir, rnaseqc_gtf_name).toString()

				///////////////////////////////////////////////////////////////////

				rsem {

					quantif_dir = Paths.get(release_dir,
													"genome_idx",
													"rsem"
													).toString()

					star {

						aligner_dir = Paths.get(quantif_dir, "star").toString()

						"100bp" {
							index_dir = Paths.get(aligner_dir, "100bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"75bp" {
							index_dir = Paths.get(aligner_dir, "75bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"50bp" {
							index_dir = Paths.get(aligner_dir, "50bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}
					}
				}
			} // end of 43

		} // end of PBANKA01

		"GRCz10" {

			version_name = "GRCz10"
			binomial = ["danio", "rerio"]

			species_dirname = binomial.join("_")
			species_filename = binomial.join("_").capitalize()

			base_name = species_filename + "." + version_name

			version_dir = Paths.get(
								base_dir,
								species_dirname,
								"ensembl",
								version_name).toString()

			"86" {

				release = "86"

				// directories
				release_dirname = "release-" + release
				release_dir = Paths.get(version_dir, release_dirname).toString()
				seq_dir = Paths.get(release_dir, "genome").toString()
				annot_dir = Paths.get(release_dir, "gtf").toString()

				// the genome sequence fasta file
				fasta_name = base_name + ".dna_sm.toplevel.fa"
				fasta = Paths.get(seq_dir, fasta_name).toString()

				///////////////////////////////////////////////////////////////////
				// annotations

				gtf_name = base_name + "." + release + ".gtf"
				gtf = Paths.get(annot_dir, gtf_name).toString()

				bed_name = base_name + "." + release + ".bed"
				bed = Paths.get(annot_dir, bed_name).toString()

				refflat_name = base_name + "." + release + ".refflat"
				refflat = Paths.get(annot_dir, refflat_name).toString()

				rrna_list_name = base_name + "." + release + ".rRNA.list"
				rrna_list = Paths.get(annot_dir, rrna_list_name).toString()

				rrna_interval_list_name =
					base_name + "." + release + ".rRNA.interval_list"
				rrna_interval_list =
					Paths.get(annot_dir, rrna_interval_list_name).toString()

				// special RNASeQC annotation
				rnaseqc_gtf_name = base_name + "." + release + ".rnaseqc.gtf"
				rnaseqc_gtf = Paths.get(annot_dir, rnaseqc_gtf_name).toString()

				///////////////////////////////////////////////////////////////////

				rsem {

					quantif_dir = Paths.get(release_dir,
													"genome_idx",
													"rsem"
													).toString()

					star {

						aligner_dir = Paths.get(quantif_dir, "star").toString()

						"100bp" {
							index_dir = Paths.get(aligner_dir, "100bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"75bp" {
							index_dir = Paths.get(aligner_dir, "75bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"50bp" {
							index_dir = Paths.get(aligner_dir, "50bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}
					}
				}
			} // end of 86

			"89" {

				release = "89"

				// directories
				release_dirname = "release-" + release
				release_dir = Paths.get(version_dir, release_dirname).toString()
				seq_dir = Paths.get(release_dir, "genome").toString()
				annot_dir = Paths.get(release_dir, "gtf").toString()

				// the genome sequence fasta file
				fasta_name = base_name + ".dna_sm.toplevel.fa"
				fasta = Paths.get(seq_dir, fasta_name).toString()

				///////////////////////////////////////////////////////////////////
				// annotations

				gtf_name = base_name + "." + release + ".gtf"
				gtf = Paths.get(annot_dir, gtf_name).toString()

				bed_name = base_name + "." + release + ".bed"
				bed = Paths.get(annot_dir, bed_name).toString()

				refflat_name = base_name + "." + release + ".refflat"
				refflat = Paths.get(annot_dir, refflat_name).toString()

				rrna_list_name = base_name + "." + release + ".rRNA.list"
				rrna_list = Paths.get(annot_dir, rrna_list_name).toString()

				rrna_interval_list_name =
					base_name + "." + release + ".rRNA.interval_list"
				rrna_interval_list =
					Paths.get(annot_dir, rrna_interval_list_name).toString()

				// special RNASeQC annotation
				rnaseqc_gtf_name = base_name + "." + release + ".rnaseqc.gtf"
				rnaseqc_gtf = Paths.get(annot_dir, rnaseqc_gtf_name).toString()

				///////////////////////////////////////////////////////////////////

				rsem {

					quantif_dir = Paths.get(release_dir,
													"genome_idx",
													"rsem"
													).toString()

					star {

						aligner_dir = Paths.get(quantif_dir, "star").toString()

						"100bp" {
							index_dir = Paths.get(aligner_dir, "100bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"75bp" {
							index_dir = Paths.get(aligner_dir, "75bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"50bp" {
							index_dir = Paths.get(aligner_dir, "50bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}
					}
				}
			} // end of 89

		} // end of GRCz10

		"GRCz11" {

			version_name = "GRCz11"
			binomial = ["danio", "rerio"]

			species_dirname = binomial.join("_")
			species_filename = binomial.join("_").capitalize()

			base_name = species_filename + "." + version_name

			version_dir = Paths.get(
								base_dir,
								species_dirname,
								"ensembl",
								version_name).toString()

			"95" {

				release = "95"

				// directories
				release_dirname = "release-" + release
				release_dir = Paths.get(version_dir, release_dirname).toString()
				seq_dir = Paths.get(release_dir, "genome").toString()
				annot_dir = Paths.get(release_dir, "gtf").toString()

				// the genome sequence fasta file
				fasta_name = base_name + ".dna_sm.toplevel.fa"
				fasta = Paths.get(seq_dir, fasta_name).toString()

				///////////////////////////////////////////////////////////////////
				// annotations

				gtf_name = base_name + "." + release + ".gtf"
				gtf = Paths.get(annot_dir, gtf_name).toString()

				bed_name = base_name + "." + release + ".bed"
				bed = Paths.get(annot_dir, bed_name).toString()

				refflat_name = base_name + "." + release + ".refflat"
				refflat = Paths.get(annot_dir, refflat_name).toString()

				rrna_list_name = base_name + "." + release + ".rRNA.list"
				rrna_list = Paths.get(annot_dir, rrna_list_name).toString()

				rrna_interval_list_name =
					base_name + "." + release + ".rRNA.interval_list"
				rrna_interval_list =
					Paths.get(annot_dir, rrna_interval_list_name).toString()

				// special RNASeQC annotation
				rnaseqc_gtf_name = base_name + "." + release + ".rnaseqc.gtf"
				rnaseqc_gtf = Paths.get(annot_dir, rnaseqc_gtf_name).toString()

				///////////////////////////////////////////////////////////////////

				rsem {

					quantif_dir = Paths.get(release_dir,
													"genome_idx",
													"rsem"
													).toString()

					star {

						aligner_dir = Paths.get(quantif_dir, "star").toString()

						"100bp" {
							index_dir = Paths.get(aligner_dir, "100bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"75bp" {
							index_dir = Paths.get(aligner_dir, "75bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}

						"50bp" {
							index_dir = Paths.get(aligner_dir, "50bp").toString()
							index = Paths.get(index_dir, "genome").toString()
						}
					}
				}
			} // end of 95

		} // end of GRCz10

	} // end of genomes

} // end of params

